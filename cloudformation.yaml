AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template para provisionar uma instância EC2 com Servidor de Tarefas (gRPC) e RabbitMQ para um projeto de lista de tarefas (persistência em memória, adaptado para AWS Playground).'

Parameters:
  InstanceType:
    Description: Tipo da instância EC2. Use t2.medium ou superior para melhor performance com RabbitMQ e Python.
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: Deve ser um tipo de instância válido.

  KeyName:
    Description: Nome do par de chaves para acessar a instância.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Deve ser o nome de um par de chaves existente.

  SSHLocation:
    Description: Endereço IP que pode acessar a instância via SSH (sua máquina local).
    Type: String
    Default: 0.0.0.0/0 
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: 'Deve ser um bloco CIDR válido (ex: 203.0.113.0/24).'

Resources:
  # --- Security Group para a instância EC2 ---
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Habilita acesso SSH, gRPC e RabbitMQ
      SecurityGroupIngress:
        # Acesso SSH
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        # Acesso gRPC (porta 50051)
        - IpProtocol: tcp
          FromPort: 50051
          ToPort: 50051
          CidrIp: !Ref SSHLocation
        # Acesso RabbitMQ (porta 5672)
        - IpProtocol: tcp
          FromPort: 5672
          ToPort: 5672
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: TarefasSecurityGroup

  # --- Instância EC2 com UserData para configuração ---
  EC2Instance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-0731becbf832f281e
      Tags:
        - Key: Name
          Value: TarefasServerInstance
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Iniciando script UserData..."
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install -y python3 python3-pip python3.12-venv git curl wget -y

          echo "Instalando RabbitMQ..."
          sudo apt install -y rabbitmq-server -y
          sudo systemctl enable rabbitmq-server
          sudo systemctl start rabbitmq-server # Corrigido: sem 's' extra
          echo "RabbitMQ instalado e iniciado."

          echo "Clonando repositório do GitHub..."
          git clone https://github.com/RaissaOliv/projeto-final-cloudformation.git /home/ubuntu/tarefas-app
          cd /home/ubuntu/tarefas-ap
          chown -R ubuntu:ubuntu /home/ubuntu/tarefas-app
          echo "Repositório clonado para /home/ubuntu/tarefas-app"

          echo "Instalando dependências Python..."
          python3 -m venv /home/ubuntu/tarefas-app/venv
          /home/ubuntu/tarefas-app/venv/bin/pip install --upgrade pip
          /home/ubuntu/tarefas-app/venv/bin/pip install grpcio grpcio-tools pika boto3

          echo "Configurando RABBITMQ_HOST para localhost no tarefas_server.py..."
          sed -i 's/^RABBITMQ_HOST = .*/RABBITMQ_HOST = "localhost"/' /home/ubuntu/tarefas-app/tarefas_server.py
          echo "RABBITMQ_HOST configurado."

          echo "Criando script de serviço systemd para o servidor gRPC..."
          cat <<EOF > /etc/systemd/system/tarefas-server.service
          [Unit]
          Description=Servidor gRPC de Tarefas
          After=network.target rabbitmq-server.service

          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu/tarefas-app
          ExecStart=/home/ubuntu/tarefas-app/venv/bin/python tarefas_server.py
          Restart=on-failure
          RestartSec=10
          StandardOutput=append:/var/log/tarefas_server.log
          StandardError=append:/var/log/tarefas_server.log

          [Install]
          WantedBy=multi-user.target
          EOF

          echo "Habilitando e iniciando o serviço gRPC..."
          sudo systemctl daemon-reload
          sudo systemctl enable tarefas-server.service
          sudo systemctl start tarefas-server.service
          echo "Servidor gRPC configurado como serviço. Verifique logs em /var/log/tarefas_server.log"
          echo "Script UserData finalizado."

Outputs:
  InstanceId:
    Description: ID da instância EC2 criada
    Value: !Ref EC2Instance

  PublicDNS:
    Description: DNS público da instância EC2
    Value: !GetAtt EC2Instance.PublicDnsName

  PublicIP:
    Description: IP público da instância EC2
    Value: !GetAtt EC2Instance.PublicIp